version: '3.9'

x-from-sdk: &from-sdk
  healthcheck:
    interval: 10s
    timeout: 5s
    retries: 10
  restart: on-failure

x-logging: &logging
  logging:
    driver: 'json-file'
    options:
      max-size: '400k'
      max-file: '20'

x-projector: &projector
  build:
    context: ../../
    target: projector
  depends_on:
    cardano-node-ogmios:
      condition: service_healthy

x-provider-server: &provider-server
  build:
    args:
      - NETWORK=${NETWORK:-mainnet}
    context: ../../
    target: provider-server
  depends_on:
    cardano-db-sync:
      condition: service_healthy

x-with-postgres: &with-postgres
  depends_on:
    postgres:
      condition: service_healthy
  secrets:
    - postgres_password
    - postgres_user
    - postgres_db
    - postgres_db_db_sync
    - postgres_db_handle
    - postgres_db_stake_pool

x-projector-environment: &projector-environment
  API_URL: http://0.0.0.0:3000
  DROP_SCHEMA: ${DROP_PROJECTOR_SCHEMA:-false}
  POSTGRES_HOST: postgres
  POSTGRES_POOL_MAX: ${POSTGRES_POOL_MAX:-10}
  POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
  POSTGRES_PORT: 5432
  POSTGRES_USER_FILE: /run/secrets/postgres_user
  SYNCHRONIZE: ${SYNCHRONIZE:-true}

x-provider-server-environment: &provider-server-environment
  API_URL: http://0.0.0.0:3000
  DB_CACHE_TTL: ${DB_CACHE_TTL:-120}
  DISABLE_DB_CACHE: ${DISABLE_DB_CACHE:-false}
  DISABLE_STAKE_POOL_METRIC_APY: ${DISABLE_STAKE_POOL_METRIC_APY:-false}
  ENABLE_METRICS: ${ENABLE_METRICS:-false}
  EPOCH_POLL_INTERVAL: ${EPOCH_POLL_INTERVAL:-500}
  SERVICE_NAMES: ${SERVICE_NAMES:-asset,chain-history,handle,network-info,rewards,stake-pool,tx-submit,utxo}
  USE_BLOCKFROST: ${USE_BLOCKFROST:-false}
  USE_QUEUE: ${USE_QUEUE:-false}

x-sdk-environment: &sdk-environment
  LOGGER_MIN_SEVERITY: ${LOGGER_MIN_SEVERITY:-info}
  OGMIOS_URL: ws://cardano-node-ogmios:1337
  POSTGRES_DB_FILE_DB_SYNC: /run/secrets/postgres_db_db_sync
  POSTGRES_DB_FILE_HANDLE: /run/secrets/postgres_db_handle
  POSTGRES_DB_FILE_STAKE_POOL: /run/secrets/postgres_db_stake_pool
  POSTGRES_HOST_DB_SYNC: postgres
  POSTGRES_HOST_HANDLE: postgres
  POSTGRES_HOST_STAKE_POOL: postgres
  POSTGRES_POOL_MAX_DB_SYNC: ${POSTGRES_POOL_MAX:-10}
  POSTGRES_POOL_MAX_HANDLE: ${POSTGRES_POOL_MAX:-10}
  POSTGRES_POOL_MAX_STAKE_POOL: ${POSTGRES_POOL_MAX:-10}
  POSTGRES_PASSWORD_FILE_DB_SYNC: /run/secrets/postgres_password
  POSTGRES_PASSWORD_FILE_HANDLE: /run/secrets/postgres_password
  POSTGRES_PASSWORD_FILE_STAKE_POOL: /run/secrets/postgres_password
  POSTGRES_PORT_DB_SYNC: 5432
  POSTGRES_PORT_HANDLE: 5432
  POSTGRES_PORT_STAKE_POOL: 5432
  POSTGRES_USER_FILE_DB_SYNC: /run/secrets/postgres_user
  POSTGRES_USER_FILE_HANDLE: /run/secrets/postgres_user
  POSTGRES_USER_FILE_STAKE_POOL: /run/secrets/postgres_user
  RABBITMQ_URL: amqp://rabbitmq:5672

services:
  cardano-db-sync:
    <<:
      - *logging
      - *with-postgres
    command: ['--config', '/config/cardano-db-sync/config.json', '--socket-path', '/node-ipc/node.socket']
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      RESTORE_SNAPSHOT: ${RESTORE_SNAPSHOT:-}
      RESTORE_RECREATE_DB: N
    depends_on:
      cardano-node-ogmios:
        condition: service_healthy
    healthcheck:
      test: ['CMD', '/scripts/is-db-synced.sh']
      interval: 5s
      timeout: 1s
      retries: 120
      start_period: 100ms
    image: inputoutput/cardano-db-sync:${CARDANO_DB_SYNC_VERSION:-13.1.0.0}
    restart: on-failure
    stop_signal: SIGINT
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
      - ../../packages/e2e/local-network/scripts:/scripts

  cardano-node-ogmios:
    <<: *logging
    healthcheck:
      retries: 2000
    ports:
      - ${OGMIOS_PORT:-1337}:1337
    restart: on-failure
    volumes:
      - node-db:/db
      - node-ipc:/ipc

  pg-boss-worker:
    <<:
      - *from-sdk
      - *logging
      - *with-postgres
    build:
      context: ../../
      target: pg-boss-worker
    depends_on:
      stake-pool-projector:
        condition: service_healthy
    environment:
      <<: *sdk-environment
      API_URL: http://0.0.0.0:3003
      QUEUES: ${QUEUES:-pool-metadata,pool-metrics}
      STAKE_POOL_PROVIDER_URL: http://provider-server:3000/stake-pool
    healthcheck:
      test: ['CMD-SHELL', 'curl -s --fail http://localhost:3003/health']
    ports:
      - ${PG_BOSS_PORT:-4003}:3003

  postgres:
    <<: *logging
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      POSTGRES_LOGGING: true
      POSTGRES_DB_FILE: /run/secrets/postgres_db_db_sync
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: postgres:${POSTGRES_VERSION:-11.5-alpine}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    restart: on-failure
    secrets:
      - postgres_db_db_sync
      - postgres_password
      - postgres_user
    shm_size: '2gb'

  handle-projector:
    <<:
      - *from-sdk
      - *logging
      - *projector
      - *with-postgres
    environment:
      <<:
        - *projector-environment
        - *sdk-environment
      POSTGRES_DB_FILE: /run/secrets/postgres_db_handle
      PROJECTION_NAMES: handle
    healthcheck:
      test:
        ['CMD-SHELL', 'test `curl -fs http://localhost:3000/health | jq -r ".services[0].projectedTip.blockNo"` -gt 1']
    ports:
      - ${HANDLE_PROJECTOR_PORT:-4004}:3000

  stake-pool-projector:
    <<:
      - *from-sdk
      - *logging
      - *projector
      - *with-postgres
    environment:
      <<:
        - *projector-environment
        - *sdk-environment
      POSTGRES_DB_FILE: /run/secrets/postgres_db_stake_pool
      PROJECTION_NAMES: stake-pool,stake-pool-metadata-job,stake-pool-metrics-job
    healthcheck:
      test:
        ['CMD-SHELL', 'test `curl -fs http://localhost:3000/health | jq -r ".services[0].projectedTip.blockNo"` -gt 1']
    ports:
      - ${STAKE_POOL_PROJECTOR_PORT:-4002}:3000

  provider-server:
    <<:
      - *from-sdk
      - *logging
      - *provider-server
      - *with-postgres
    environment:
      <<:
        - *sdk-environment
        - *provider-server-environment
    ports:
      - ${API_PORT:-4000}:3000

  stake-pool-provider-server:
    <<:
      - *from-sdk
      - *logging
      - *provider-server
      - *with-postgres
    environment:
      <<:
        - *sdk-environment
        - *provider-server-environment
      SERVICE_NAMES: stake-pool
      USE_TYPEORM_STAKE_POOL_PROVIDER: true
    ports:
      - ${STAKE_POOL_API_PORT:-4010}:3000

  rabbitmq:
    <<: *logging
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 200
    image: rabbitmq:3.10-management
    ports:
      # HTTP management API
      - 15672:15672
    restart: on-failure
    volumes:
      - rabbitmq-db:/var/lib/rabbitmq/mnesia

  worker:
    <<:
      - *from-sdk
      - *logging
    build:
      context: ../../
      target: worker
    depends_on:
      cardano-node-ogmios:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      <<: *sdk-environment
      PARALLEL: ${PARALLEL:-false}
      PARALLEL_TX: ${PARALLEL_TX:-3}
      POLLING_CYCLE: ${POLLING_CYCLE:-500}
    restart: on-failure

secrets:
  # Replicates the db-sync secret for historical reasons.
  # When the SDK was using only one database (the db-sync one) the only secret for database name used was this one
  # to be compliant with db-sync image naming.
  # The upstream db-sync Docker image is missing environment variables that allow the consumer to mount into a
  # non-standard path, so we must conform with the hard-coded secret name.
  # As demonstrated here: https://docs.docker.com/compose/use-secrets/#advanced, we could extend the Docker image
  # and define POSTGRES_DB_FILE as the custom path to remove this workaround.
  # See https://github.com/input-output-hk/cardano-db-sync/blob/aed18d1be192bd58d054cdba23758b579dae9f4e/nix/docker.nix#L116
  postgres_db:
    file: ../../compose/placeholder-secrets/postgres_db_db_sync
  postgres_db_db_sync:
    file: ../../compose/placeholder-secrets/postgres_db_db_sync
  postgres_db_handle:
    file: ../../compose/placeholder-secrets/postgres_db_handle
  postgres_db_stake_pool:
    file: ../../compose/placeholder-secrets/postgres_db_stake_pool
  postgres_password:
    file: ../../compose/placeholder-secrets/postgres_password
  postgres_user:
    file: ../../compose/placeholder-secrets/postgres_user

volumes:
  db-sync-data:
  node-db:
  node-ipc:
  rabbitmq-db:
