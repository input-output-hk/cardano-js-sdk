version: '3.9'

x-logging: &logging
  logging:
    driver: 'json-file'
    options:
      max-size: '400k'
      max-file: '20'

services:
  cardano-db-sync:
    <<: *logging
    command: ['--config', '/config/cardano-db-sync/config.json', '--socket-path', '/node-ipc/node.socket']
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
    depends_on:
      cardano-node-ogmios:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', '/scripts/is-db-synced.sh']
      interval: 5s
      timeout: 1s
      retries: 120
      start_period: 100ms
    image: inputoutput/cardano-db-sync:${CARDANO_DB_SYNC_VERSION:-13.1.0.0}
    restart: on-failure
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    stop_signal: SIGINT
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
      - ../../packages/e2e/local-network/scripts:/scripts

  cardano-node-ogmios:
    <<: *logging
    healthcheck:
      retries: 2000
    ports:
      - ${OGMIOS_PORT:-1337}:1337
    restart: on-failure
    volumes:
      - node-db:/db
      - node-ipc:/ipc

  postgres:
    <<: *logging
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    image: postgres:${POSTGRES_VERSION:-11.5-alpine}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    restart: on-failure
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    shm_size: '2gb'

  provider-server:
    <<: *logging
    build:
      args:
        - NETWORK=${NETWORK:-mainnet}
      context: ../../
      target: provider-server
    depends_on:
      cardano-db-sync:
        condition: service_healthy
    environment:
      - DB_CACHE_TTL=${DB_CACHE_TTL:-120}
      - DISABLE_DB_CACHE=${DISABLE_DB_CACHE:-false}
      - DISABLE_STAKE_POOL_METRIC_APY=${DISABLE_STAKE_POOL_METRIC_APY:-false}
      - ENABLE_METRICS=${ENABLE_METRICS:-false}
      - EPOCH_POLL_INTERVAL=${EPOCH_POLL_INTERVAL:-500}
      - LOGGER_MIN_SEVERITY=${LOGGER_MIN_SEVERITY:-info}
      - OGMIOS_URL=ws://cardano-node-ogmios:1337
      - POSTGRES_POOL_MAX=${POSTGRES_POOL_MAX:-10}
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - SERVICE_NAMES=${SERVICE_NAMES:-asset,chain-history,network-info,rewards,stake-pool,tx-submit,utxo}
      - USE_BLOCKFROST=${USE_BLOCKFROST:-false}
      - USE_QUEUE=${USE_QUEUE:-false}
    ports:
      - ${API_PORT:-4000}:3000
    restart: on-failure
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user

  rabbitmq:
    <<: *logging
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 200
    image: rabbitmq:3.10-management
    ports:
      # HTTP management API
      - 15672:15672
    restart: on-failure
    volumes:
      - rabbitmq-db:/var/lib/rabbitmq/mnesia

  worker:
    build:
      context: ../../
      target: worker
    depends_on:
      cardano-node-ogmios:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - LOGGER_MIN_SEVERITY=${LOGGER_MIN_SEVERITY:-info}
      - OGMIOS_URL=ws://cardano-node-ogmios:1337
      - PARALLEL=${PARALLEL:-false}
      - PARALLEL_TX=${PARALLEL_TX:-3}
      - POLLING_CYCLE=${POLLING_CYCLE:-500}
      - RABBITMQ_URL=amqp://rabbitmq:5672
    restart: on-failure

volumes:
  db-sync-data:
  node-db:
  node-ipc:
  rabbitmq-db:
