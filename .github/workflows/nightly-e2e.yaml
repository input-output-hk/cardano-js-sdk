name: nightly-e2e

on:
  workflow_dispatch:
  workflow_run:
    workflows: [nightly-test]
    types:
      - completed

jobs:
  fail:
    name: "Fail the workflow run by exiting"
    if: ${{ github.event_name != 'workflow_dispatch' && github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-20.04
    steps:
      - name: "exit 1"
        run: exit 1

  test:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v3
      with:
        ref: nightly

    - name: üß∞ Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.12.0
        registry-url: 'https://registry.npmjs.org'

    - name: üíΩ Install dependencies
      run: |
        yarn install --immutable --inline-builds --mode=skip-build

    - name: üî® Build
      run: |
        yarn build

    - name: üåê Setup local test network
      working-directory: packages/e2e
      run: |
        yarn local-network:up -d
      env:
        POSTGRES_PORT: '5435'
        OGMIOS_PORT: '1340'
        OGMIOS_URL: 'ws://cardano-node-ogmios:1340'

    - name: Wait for some epochs
      run: |
        yarn workspace @cardano-sdk/e2e wait-for-network
      env:
        FAUCET_PROVIDER: 'cardano-wallet'
        FAUCET_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:8090/v2","mnemonic":"fire method repair aware foot tray accuse brother popular olive find account sick rocket next"}'
        DB_SYNC_CONNECTION_STRING: 'postgresql://postgres:doNoUseThisSecret!@localhost:5435/cexplorer'

    - name: üî¨ Test - e2e - wallet | long-running
      run: |
        yarn workspace @cardano-sdk/e2e test:wallet
        yarn workspace @cardano-sdk/e2e test:long-running
      env:
        FAUCET_PROVIDER: 'cardano-wallet'
        FAUCET_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:8090/v2","mnemonic":"fire method repair aware foot tray accuse brother popular olive find account sick rocket next"}'
        KEY_MANAGEMENT_PROVIDER: 'inMemory'
        KEY_MANAGEMENT_PARAMS: '{"bip32Ed25519": "CML", "accountIndex": 0, "chainId":{"networkId": 0, "networkMagic": 888}, "passphrase":"some_passphrase","mnemonic":"vacant violin soft weird deliver render brief always monitor general maid smart jelly core drastic erode echo there clump dizzy card filter option defense"}'
        ASSET_PROVIDER: 'http'
        ASSET_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/asset"}'
        CHAIN_HISTORY_PROVIDER: 'http'
        CHAIN_HISTORY_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/chain-history"}'
        DB_SYNC_CONNECTION_STRING: 'postgresql://postgres:doNoUseThisSecret!@localhost:5435/cexplorer'
        PROJECTION_PG_CONNECTION_STRING: 'postgresql://postgres:doNoUseThisSecret!@localhost:5435/projection'
        NETWORK_INFO_PROVIDER: 'http'
        NETWORK_INFO_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/network-info"}'
        OGMIOS_URL: 'ws://localhost:1340/'
        REWARDS_PROVIDER: 'http'
        REWARDS_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/rewards"}'
        TX_SUBMIT_PROVIDER: 'http'
        TX_SUBMIT_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/tx-submit"}'
        UTXO_PROVIDER: 'http'
        UTXO_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/utxo"}'
        STAKE_POOL_PROVIDER: 'http'
        STAKE_POOL_PROVIDER_PARAMS: '{"baseUrl":"http://localhost:4000/stake-pool"}'
