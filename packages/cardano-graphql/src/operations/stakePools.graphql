fragment certificateTransactionFields on Transaction {
  block {
    blockNo
  }
  hash
}

fragment allPoolParameterFields on PoolParameters {
  metadata {
    ticker
    name
    description
    homepage
    extDataUrl
    extSigUrl
    extVkey
    ext {
      serial
      pool {
        id
        country
        status
        contact {
          primary
          email
          facebook
          github
          feed
          telegram
          twitter
        }
        media_assets {
          icon_png_64x64
          logo_png
          logo_svg
          color_fg
          color_bg
        }
        itn {
          owner
          witness
        }
      }
    }
  }
  owners {
    address
  }
  cost
  margin {
    numerator
    denominator
  }
  vrf
  relays {
    __typename
    ... on RelayByName {
      hostname
      port
    }
    ... on RelayByAddress {
      ipv4
      ipv6
      port
    }
    ... on RelayByNameMultihost {
      dnsName
    }
  }
  poolRegistrationCertificate {
    transaction {
      hash
    }
  }
  rewardAccount {
    address
  }
  pledge
  metadataJson {
    hash
    url
  }
}

fragment allStakePoolFields on StakePool {
  id
  hexId
  status
  # TODO:
  # * don't limit to first, add order by transaction index
  # * update provider service code reflect no limit
  poolParameters(order: { desc: sinceEpochNo, then: { desc: transactionBlockNo } }, first: 1) {
    ...allPoolParameterFields
  }
  metrics(order: {desc: blockNo}, first: 1) {
    blocksCreated
    livePledge
    stake {
      live
      active
    }
    size {
      live
      active
    }
    saturation
    delegators
  }
  poolRetirementCertificates {
    transaction {
      ...certificateTransactionFields
    }
  }
  epochRewards(order: { desc: epochNo }, first: $epochRewardsLimit) {
    epochNo
    epochLength
    activeStake
    operatorFees
    totalRewards
    memberROI
  }
}

query StakePoolsByMetadata(
  $query: String!
  $omit: [String!] = ["NEED_THIS_BECAUSE_IN_OPERATOR_WONT_WORK_WITH_EMPTY_ARR"]
  $epochRewardsLimit: Int = 2147483647
) {
  queryStakePoolMetadata(
    filter: {
      and: [
        { or: [{ name: { anyoftext: $query } }, { ticker: { anyoftext: $query } }] }
        { not: { stakePoolId: { in: $omit } } }
      ]
    }
  ) {
    poolParameters {
      stakePool {
        ...allStakePoolFields
      }
    }
  }
}

query StakePools($query: String!, $epochRewardsLimit: Int = 2147483647) {
  queryStakePool(filter: { id: { anyoftext: $query } }) {
    ...allStakePoolFields
  }
}
