import { EpochNo } from '../Block';
import { Lovelace } from '../Value';
import { Percent } from '@cardano-sdk/util';
import { PoolIdHex } from './primitives';
import { PoolParameters } from './PoolParameters';

/**
 * Stake quantities for a Stake Pool.
 */
export interface StakePoolMetricsStake {
  /**
   * The total amount of stake currently delegated to the pool. This will be snapshotted at the end of the epoch.
   */
  live: Lovelace;

  /**
   * A snapshot from 2 epochs ago, used in the current epoch as part of the block leadership schedule.
   */
  active: Lovelace;
}

/**
 * Stake percentages for a Stake Pool.
 */
export interface StakePoolMetricsSize {
  /**
   * The percentage of stake currently delegated to the pool. This will be snapshotted at the end of the epoch.
   */
  live: Percent;

  /**
   * Percentage of stake as a snapshot from 2 epochs ago, used in the current epoch as part of the
   * block leadership schedule.
   */
  active: Percent;
}

/**
 * Stake pool performance metrics.
 */
export interface StakePoolMetrics {
  /**
   * Total blocks created by the pool.
   */
  blocksCreated: number;

  /**
   * This can be used to determine the likelihood of the pool meeting its pledge at the next snapshot.
   */
  livePledge: Lovelace;

  /**
   * Quantity of stake being controlled by the pool.
   */
  stake: StakePoolMetricsStake;

  /**
   * Percentage of stake being controlled by the pool.
   */
  size: StakePoolMetricsSize;

  /**
   * The current saturation of the pool. The amount of rewards generated by the pool gets capped at a pool saturation
   * of 100%; This is part of the protocol to promote decentralization of the stake.
   */
  saturation: Percent;

  /**
   * Number of stakeholders, represented by a stake key, delegating to this pool.
   */
  delegators: number;

  /**
   * The Annual Percentage Yield (APY) from a delegator's perspective in the given period.
   *
   * The given period is defined by all requested spendable epochs: all requested epochs except
   * the current and previous.
   *
   * Formula: (memberRewards / (activeStake - pledge)) / days_per_epoch * 365
   *
   * Where: memberRewards, activeStake and pledge are the sum of the respective data from all
   * epochs in the given period.
   */
  apy?: Percent;
}

/**
 * Pool status.
 */
export enum StakePoolStatus {
  Activating = 'activating',
  Active = 'active',
  Retired = 'retired',
  Retiring = 'retiring'
}

/**
 * Stake pool epoch stats.
 */
export class StakePoolEpochRewards {
  /**
   * Active stake is a stake snapshot from 2 epochs ago and is used in the current era
   * as part of the block leadership schedule.
   */
  activeStake: Lovelace;

  /**
   * The epoch number at which these rewards were calculated.
   */
  epoch: EpochNo;

  /**
   * Epoch length in milliseconds.
   */
  epochLength: number;

  /**
   * The rewards generated by the pool that leaders have access to up to the current epoch.
   * Incomplete for last two epochs.
   */
  leaderRewards: Lovelace;

  /**
   * The Return Of Investment (ROI) from a delegator's perspective in the given epoch. Not annualized.
   *
   * Formula: memberRewards / (activeStake - pledge)
   *
   * Incomplete for last two epochs.
   */
  memberROI: Percent;

  /**
   * The rewards generated by the pool that members have access to up to the current epoch.
   * Incomplete for last two epochs.
   */
  memberRewards: Lovelace;

  /**
   * The part of active stake pledged by the pool owners.
   */
  pledge: Lovelace;
}

/**
 * Stake pool information about the performance, status, transaction, rewards and pool parameters.
 */
export interface StakePool extends PoolParameters {
  /**
   * Stake pool ID as a hex string
   */
  hexId: PoolIdHex;

  /**
   * Stake pool metrics
   */
  metrics?: StakePoolMetrics;

  /**
   * Stake pool status
   */
  status: StakePoolStatus;
}
