/* eslint-disable sonarjs/no-duplicate-string */
import * as Crypto from '@cardano-sdk/crypto';

import { Cardano, Serialization } from '../../src';
import { HexBlob } from '@cardano-sdk/util';

// Test data used in the following tests was generated with the cardano-cli and the cardano-serialization-lib
describe('Scripts', () => {
  it('can decode the nested native script from CBOR', () => {
    const script = Serialization.Script.fromCbor(
      HexBlob(
        '82008202828200581cb275b08c999097247f7c17e77007c7010cd19f20cc086ad99d3985388201838205190bb88200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378204190fa0'
      )
    );

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('8b8370c97ae17eb69a8c97f733888f7485b60fd820c69211c8bbeb56'));
    expect(script.toCore()).toEqual({
      __type: Cardano.ScriptType.Native,
      kind: Cardano.NativeScriptKind.RequireAnyOf,
      scripts: [
        {
          __type: Cardano.ScriptType.Native,
          keyHash: Crypto.Ed25519KeyHashHex('b275b08c999097247f7c17e77007c7010cd19f20cc086ad99d398538'),
          kind: Cardano.NativeScriptKind.RequireSignature
        },
        {
          __type: Cardano.ScriptType.Native,
          kind: Cardano.NativeScriptKind.RequireAllOf,
          scripts: [
            {
              __type: Cardano.ScriptType.Native,
              kind: Cardano.NativeScriptKind.RequireTimeBefore,
              slot: Cardano.Slot(3000)
            },
            {
              __type: Cardano.ScriptType.Native,
              keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
              kind: Cardano.NativeScriptKind.RequireSignature
            },
            {
              __type: Cardano.ScriptType.Native,
              kind: Cardano.NativeScriptKind.RequireTimeAfter,
              slot: Cardano.Slot(4000)
            }
          ]
        }
      ]
    });
  });

  it('can decode the nested native script from a Core object', () => {
    const script = Serialization.Script.fromCore({
      __type: Cardano.ScriptType.Native,
      kind: Cardano.NativeScriptKind.RequireAnyOf,
      scripts: [
        {
          __type: Cardano.ScriptType.Native,
          keyHash: Crypto.Ed25519KeyHashHex('b275b08c999097247f7c17e77007c7010cd19f20cc086ad99d398538'),
          kind: Cardano.NativeScriptKind.RequireSignature
        },
        {
          __type: Cardano.ScriptType.Native,
          kind: Cardano.NativeScriptKind.RequireAllOf,
          scripts: [
            {
              __type: Cardano.ScriptType.Native,
              kind: Cardano.NativeScriptKind.RequireTimeBefore,
              slot: Cardano.Slot(3000)
            },
            {
              __type: Cardano.ScriptType.Native,
              keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
              kind: Cardano.NativeScriptKind.RequireSignature
            },
            {
              __type: Cardano.ScriptType.Native,
              kind: Cardano.NativeScriptKind.RequireTimeAfter,
              slot: Cardano.Slot(4000)
            }
          ]
        }
      ]
    });

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('8b8370c97ae17eb69a8c97f733888f7485b60fd820c69211c8bbeb56'));
    expect(script.toCbor()).toEqual(
      HexBlob(
        '82008202828200581cb275b08c999097247f7c17e77007c7010cd19f20cc086ad99d3985388201838205190bb88200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378204190fa0'
      )
    );
  });

  it('can decode plutus v1 script from CBOR', () => {
    const script = Serialization.Script.fromCbor(HexBlob('82014e4d01000033222220051200120011'));

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('67f33146617a5e61936081db3b2117cbf59bd2123748f58ac9678656'));
    expect(script.toCore()).toEqual({
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob('4d01000033222220051200120011'),
      version: Cardano.PlutusLanguageVersion.V1
    });
  });

  it('can decode plutus v1 script from Core', () => {
    const script = Serialization.Script.fromCore({
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob('4d01000033222220051200120011'),
      version: Cardano.PlutusLanguageVersion.V1
    });

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('67f33146617a5e61936081db3b2117cbf59bd2123748f58ac9678656'));
    expect(script.toCbor()).toEqual(HexBlob('82014e4d01000033222220051200120011'));
  });

  it('can decode plutus v2 script from CBOR', () => {
    const script = Serialization.Script.fromCbor(
      HexBlob(
        '82025908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      )
    );

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('b3b7938690083d898380ce6482fcd9094a5268248cef3868507ac2bc'));
    expect(script.toCore()).toEqual({
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob(
        '5908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      ),
      version: Cardano.PlutusLanguageVersion.V2
    });
  });

  it('can decode plutus v2 script from Core', () => {
    const script = Serialization.Script.fromCore({
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob(
        '5908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      ),
      version: Cardano.PlutusLanguageVersion.V2
    });

    expect(script.hash()).toEqual(Crypto.Hash28ByteBase16('b3b7938690083d898380ce6482fcd9094a5268248cef3868507ac2bc'));
    expect(script.toCbor()).toEqual(
      HexBlob(
        '82025908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      )
    );
  });

  describe('PlutusScripts', () => {
    describe('V1', () => {
      const coreV1PlutusScript: Cardano.PlutusScript = {
        __type: Cardano.ScriptType.Plutus,
        bytes: HexBlob('4d01000033222220051200120011'),
        version: Cardano.PlutusLanguageVersion.V1
      };
      const plutusV1Bytes = HexBlob('4d01000033222220051200120011');
      const plutusCborV1Bytes = HexBlob('4e4d01000033222220051200120011');
      const plutusHash = HexBlob('67f33146617a5e61936081db3b2117cbf59bd2123748f58ac9678656');

      it('can decode the script from a Core object', () => {
        const script = Serialization.PlutusV1Script.fromCore(coreV1PlutusScript);

        expect(script.toCbor()).toEqual(plutusCborV1Bytes);
        expect(script.rawBytes()).toEqual(plutusV1Bytes);
        expect(script.hash()).toEqual(plutusHash);
      });

      it('can decode the script from a CBOR', () => {
        const script = Serialization.PlutusV1Script.fromCbor(plutusCborV1Bytes);

        expect(script.toCore()).toEqual(coreV1PlutusScript);
        expect(script.rawBytes()).toEqual(plutusV1Bytes);
        expect(script.hash()).toEqual(plutusHash);
      });
    });

    describe('V2', () => {
      const coreV2PlutusScript: Cardano.PlutusScript = {
        __type: Cardano.ScriptType.Plutus,
        bytes: HexBlob(
          '5908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
        ),
        version: Cardano.PlutusLanguageVersion.V2
      };
      const plutusV2Bytes = HexBlob(
        '5908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      );
      const plutusCborV2Bytes = HexBlob(
        '5908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041'
      );
      const plutusHash = HexBlob('b3b7938690083d898380ce6482fcd9094a5268248cef3868507ac2bc');

      it('can decode the script from a Core object', () => {
        const script = Serialization.PlutusV2Script.fromCore(coreV2PlutusScript);

        expect(script.toCbor()).toEqual(plutusCborV2Bytes);
        expect(script.rawBytes()).toEqual(plutusV2Bytes);
        expect(script.hash()).toEqual(plutusHash);
      });

      it('can decode the script from a CBOR', () => {
        const script = Serialization.PlutusV2Script.fromCbor(plutusCborV2Bytes);

        expect(script.toCore()).toEqual(coreV2PlutusScript);
        expect(script.rawBytes()).toEqual(plutusV2Bytes);
        expect(script.hash()).toEqual(plutusHash);
      });
    });
  });
  describe('NativeScripts', () => {
    describe('ScriptPubkey', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
        kind: Cardano.NativeScriptKind.RequireSignature
      };
      const cbor = HexBlob('8200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37');
      const scriptHash = Crypto.Hash28ByteBase16('44e8537337e941f125478607b7ab91515b5eca4ef647b10c16c63ed2');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asScriptPubkey()).toBeDefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();

        expect(script.asScriptPubkey()!.keyHash()).toEqual(
          Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37')
        );
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asScriptPubkey()).toBeDefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();

        expect(script.asScriptPubkey()!.keyHash()).toEqual(
          Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37')
        );
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });

    describe('TimelockStart', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        kind: Cardano.NativeScriptKind.RequireTimeAfter,
        slot: Cardano.Slot(40_000_010)
      };
      const cbor = HexBlob('82041a02625a0a');
      const scriptHash = Crypto.Hash28ByteBase16('bdda6da5dcca0c3dcb5a1000b23febf79e5741f3f1872b8aadaf92f6');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asTimelockStart()).toBeDefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();

        expect(script.asTimelockStart()!.slot()).toEqual(Cardano.Slot(40_000_010));
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asTimelockStart()).toBeDefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();

        expect(script.asTimelockStart()!.slot()).toEqual(Cardano.Slot(40_000_010));
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });

    describe('TimelockExpiry', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        kind: Cardano.NativeScriptKind.RequireTimeBefore,
        slot: Cardano.Slot(3000)
      };
      const cbor = HexBlob('8205190bb8');
      const scriptHash = Crypto.Hash28ByteBase16('e638e31a6c57bde95c0b644ec0c584a239fab33ba99f41c91b410d1d');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asTimelockExpiry()).toBeDefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asTimelockExpiry()!.slot()).toEqual(Cardano.Slot(3000));
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asTimelockExpiry()).toBeDefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asTimelockExpiry()!.slot()).toEqual(Cardano.Slot(3000));
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });

    describe('ScriptAll', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        kind: Cardano.NativeScriptKind.RequireAllOf,
        scripts: [
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeBefore,
            slot: Cardano.Slot(3000)
          },
          {
            __type: Cardano.ScriptType.Native,
            keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
            kind: Cardano.NativeScriptKind.RequireSignature
          },
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeAfter,
            slot: Cardano.Slot(4000)
          }
        ]
      };
      const cbor = HexBlob(
        '8201838205190bb88200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378204190fa0'
      );
      const scriptHash = Crypto.Hash28ByteBase16('5ea7df92c0b5c88f60061d04140aee2b69414bafe04fbe19144bb693');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asScriptAll()).toBeDefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptAll()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptAll()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asScriptAll()).toBeDefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptAll()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptAll()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });

    describe('ScriptAny', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        kind: Cardano.NativeScriptKind.RequireAnyOf,
        scripts: [
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeBefore,
            slot: Cardano.Slot(3000)
          },
          {
            __type: Cardano.ScriptType.Native,
            keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
            kind: Cardano.NativeScriptKind.RequireSignature
          },
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeAfter,
            slot: Cardano.Slot(4000)
          }
        ]
      };

      const cbor = HexBlob(
        '8202838205190bb88200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378204190fa0'
      );
      const scriptHash = Crypto.Hash28ByteBase16('70e5950987ed08bf51fa0138fbda822f216b0aa9dca48ae947c1e511');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asScriptAny()).toBeDefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptAny()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptAny()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asScriptAny()).toBeDefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptNOfK()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptAny()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptAny()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });

    describe('ScriptNOfK', () => {
      const core: Cardano.NativeScript = {
        __type: Cardano.ScriptType.Native,
        kind: Cardano.NativeScriptKind.RequireNOf,
        required: 2,
        scripts: [
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeBefore,
            slot: Cardano.Slot(3000)
          },
          {
            __type: Cardano.ScriptType.Native,
            keyHash: Crypto.Ed25519KeyHashHex('966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37'),
            kind: Cardano.NativeScriptKind.RequireSignature
          },
          {
            __type: Cardano.ScriptType.Native,
            kind: Cardano.NativeScriptKind.RequireTimeAfter,
            slot: Cardano.Slot(4000)
          }
        ]
      };

      const cbor = HexBlob(
        '830302838205190bb88200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378204190fa0'
      );
      const scriptHash = Crypto.Hash28ByteBase16('a1fe3a12ce7c1d7e8c0621d97970cf3092f5c1f7677adc954a96c09b');

      it('can decode the script from CBOR', () => {
        const script = Serialization.NativeScript.fromCbor(cbor);

        expect(script.asScriptNOfK()).toBeDefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptNOfK()!.required()).toEqual(core.required);
        expect(script.asScriptNOfK()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptNOfK()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can decode the script from a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);

        expect(script.asScriptNOfK()).toBeDefined();
        expect(script.asScriptAny()).toBeUndefined();
        expect(script.asTimelockExpiry()).toBeUndefined();
        expect(script.asScriptPubkey()).toBeUndefined();
        expect(script.asScriptAll()).toBeUndefined();
        expect(script.asTimelockStart()).toBeUndefined();

        expect(script.asScriptNOfK()!.required()).toEqual(core.required);
        expect(script.asScriptNOfK()!.nativeScripts().length).toEqual(core.scripts.length);
        expect(
          script
            .asScriptNOfK()!
            .nativeScripts()
            .map((s) => s.toCore())
        ).toEqual(core.scripts);
      });

      it('can encode to CBOR', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCbor()).toEqual(cbor);
      });

      it('can encode to a Core object', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.toCore()).toEqual(core);
      });

      it('can compute the correct script hash', () => {
        const script = Serialization.NativeScript.fromCore(core);
        expect(script.hash()).toEqual(scriptHash);
      });
    });
  });
});
