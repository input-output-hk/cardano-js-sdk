// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { Provider, HealthCheckResponse } from '../../../core';
import { WalletServer, ApiNetworkInformationSyncProgressStatusEnum,
         AddressWallet, TransactionWallet, ApiTransactionStatusEnum } from 'cardano-wallet-js'
import { FaucetProvider, FaucetRequestResult, FaucetRequestTransactionStatus, } from '../types'
import { Stopwatch } from "ts-stopwatch";

// Constnats
const FAUCET_PASSPHRASE:           string = "passphrase";
const FAUCET_WALLET_NAME:          string = "faucet";
const HTTP_ERROR_CODE_IN_CONFLICT: number = 409;

/**
 * Cardano Wallet implementation of the faucet provider. This provider utlizes the Cardano Wallet HTTP service
 * to construct, sign, submit and track the transaction generated by the faucet.
 */
export class CardanoWalletFaucetService implements FaucetProvider {

  _serviceUrl:     string  = "";
  _seedPhrases:    string  = "";
  _faucetWalletId: string  = "";
  _walletServer:   WalletServer;
 
  /**
   * Initializes a new instance of the CardanoWalletFaucetService class.
   * 
   * @param url The cardano wallet server REST endpoint.
   * @param seedPhrases The seedphrases of the faucet wallet.
   */
  constructor(url: string, seedPhrases: string) {

    this._serviceUrl  = url;
    this._seedPhrases = seedPhrases;
  }

  /**
   * Request tAda to be transferred to the given address.
   * 
   * @param address The address where the tAda must be deposited.
   * @param amount  The amount of tAda to be debposited (in lovelace).
   * @param timeout The time we are willing to wait (in milliseconds) for the faucet request transaction to be confirmed.
   * 
   * @throws If the transaction generated by this request is not confirmed on time.
   */
  public async request(address: string, amount: number, timeout: number): Promise<FaucetRequestResult> {
 
    let faucetWallet = await this._walletServer.getShelleyWallet(this._faucetWalletId);
    
    let receiverAddress = [new AddressWallet(address)];
    let amounts = [amount];

    const stopwatch = new Stopwatch();
    stopwatch.start();

    let transaction: TransactionWallet = await faucetWallet.sendPayment(FAUCET_PASSPHRASE, receiverAddress, amounts);

    while (transaction.status === ApiTransactionStatusEnum.Pending && stopwatch.getTime() < timeout)
      transaction = await faucetWallet.getTransaction(transaction.id);

    stopwatch.stop();

    if (stopwatch.getTime() >= timeout)
      throw `The transaction ${transaction.id} was not confirmed on time`;

    return {
      txId: transaction.id,
      status: this.mapStatus(transaction.status),
      time: transaction.inserted_at?.time
    }
  }

  /**
   * Starts the provider.
   */
  public async start(): Promise<void> {

    const walletInfo = {
      name: FAUCET_WALLET_NAME,
      mnemonic_sentence: this._seedPhrases.split(' '),
      passphrase: FAUCET_PASSPHRASE,
      address_pool_gap: 20 };

      this._walletServer = WalletServer.init(this._serviceUrl);

      let axiosResponse = await this._walletServer.walletsApi.postWallet(walletInfo).catch(e => {

        // This seed phrases already exists on the cardano wallet service.
        if (e.response.status === HTTP_ERROR_CODE_IN_CONFLICT)
        {
          // TODO: If the seedphrases were already added to Cardano Wallet, the id of the wallet
          // will be returned in an error message, we can then extract the id from the message, however
          // this extremely brittle. We must find a better way to get the wallet id given a set of seed phrases.
          this._faucetWalletId = e.response.data.message.match(/(?<=\: ).*(?=\ H)/g)[0];
        }
        else
        {
          throw e.response.data;
        }
      });

      if (axiosResponse)
        this._faucetWalletId = axiosResponse.data.id;

      return;
  }
 
  /**
   * Closes the provider.
   */
  public async close(): Promise<void> {

    this._faucetWalletId = "";
    return;
  }

  /**
   * Performs a health check on the provider.
   * 
   * @return A promise with the healthcheck reponse.
   */
  public async healthCheck(): Promise<HealthCheckResponse> {

    const networkInfo = await this._walletServer.getNetworkInformation();

    return { ok: networkInfo.sync_progress.status === ApiNetworkInformationSyncProgressStatusEnum.Ready 
      && this._faucetWalletId !== "" };
  }

  /**
   * Converts the cardano wallet transaction result enum to our FaucetRequestTransactionStatus enum.
   * @param status The cardano wallet enum to be converted.
   * 
   * @returns The FaucetRequestTransactionStatus equivalent enum value.
   */
  private mapStatus(status: ApiTransactionStatusEnum) : FaucetRequestTransactionStatus {
    let mappedStatus: FaucetRequestTransactionStatus = FaucetRequestTransactionStatus.Expired;
    switch (status) {
      case ApiTransactionStatusEnum.Expired:
        mappedStatus = FaucetRequestTransactionStatus.Expired;
        break;
      case ApiTransactionStatusEnum.InLedger:
        mappedStatus = FaucetRequestTransactionStatus.InLedger;
        break;
      case ApiTransactionStatusEnum.Pending:
        mappedStatus = FaucetRequestTransactionStatus.Pending;
        break;
    }

    return mappedStatus;
  }
}