import { BaseWallet } from '@cardano-sdk/wallet';
import { Cardano, Serialization, UtxoProvider } from '@cardano-sdk/core';
import { HexBlob, isNotNil } from '@cardano-sdk/util';
import { Observable, filter, firstValueFrom, interval, map, switchMap, take } from 'rxjs';
import { createLogger } from '@cardano-sdk/util-dev';
import { getEnv, getWallet, utxoProviderFactory, walletReady, walletVariables } from '../../../src';

const env = getEnv(walletVariables);
const logger = createLogger();

const scriptRedeemer: Cardano.PlutusData = {
  constructor: 0n,
  fields: {
    items: [21n]
  }
};

const scriptDatum: Cardano.PlutusData = {
  constructor: 0n,
  fields: {
    items: [42n]
  }
};

const midnightClaimRedeemer: Cardano.PlutusData = {
  items: [
    // chainCode
    2n,
    // grantWallet
    new Uint8Array([
      203, 209, 183, 104, 17, 74, 8, 166, 94, 101, 33, 139, 195, 134, 35, 246, 25, 118, 87, 49, 207, 123, 41, 139, 32,
      144, 158, 153, 124, 40, 27, 102
    ]),
    // rdmrGrantAmount
    1n,
    // grantIx
    115n,
    // rdmrCardanoPubKey
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
    // rdmrMidnightKey
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]),
    // rdmrPubKey
    new Uint8Array([
      214, 13, 16, 28, 145, 79, 106, 83, 253, 255, 40, 69, 88, 98, 130, 102, 222, 180, 1, 144, 68, 152, 115, 119, 107,
      51, 71, 105, 40, 115, 59, 69
    ]),
    // rdmrSignature
    new Uint8Array([
      219, 89, 171, 195, 164, 168, 115, 84, 103, 158, 18, 134, 24, 127, 183, 137, 19, 50, 155, 210, 247, 198, 162, 186,
      239, 175, 25, 248, 84, 112, 137, 228, 121, 3, 218, 45, 137, 84, 103, 130, 61, 143, 172, 133, 145, 121, 132, 10,
      160, 14, 101, 204, 212, 12, 229, 134, 146, 67, 101, 114, 197, 31, 167, 5
    ]),
    // hashes
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  ]
};

const midnightDatum = {
  items: [
    // datumClaimMask
    340_199_290_171_201_906_221_318_119_490_500_689_920n,
    // datumRootHash
    new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
  ]
};

const fundScript = async (wallet: BaseWallet, receivingAddress: Cardano.PaymentAddress, datum: Cardano.PlutusData) => {
  const tAdaToSend = 10_000_000n;
  // Make sure the wallet has sufficient funds to run this test
  await walletReady(wallet, tAdaToSend);

  await firstValueFrom(wallet.syncStatus.isSettled$.pipe(filter((isSettled) => isSettled)));

  const [{ address: sendingAddress }] = await firstValueFrom(wallet.addresses$);

  logger.info(`Address ${sendingAddress} will send ${tAdaToSend} lovelace to address ${receivingAddress}.`);

  // Send 10 tADA to the same wallet.
  const txBuilder = wallet.createTxBuilder();
  const txOutput = await txBuilder.buildOutput().address(receivingAddress).coin(tAdaToSend).datum(datum).build();
  const signedTx = (await txBuilder.addOutput(txOutput).build().sign()).tx;
  await wallet.submitTx(signedTx);

  logger.info(
    `Submitted transaction id: ${signedTx.id}, inputs: ${JSON.stringify(
      signedTx.body.inputs.map((txIn) => [txIn.txId, txIn.index])
    )} and outputs:${JSON.stringify(
      signedTx.body.outputs.map((txOut) => [txOut.address, Number.parseInt(txOut.value.coins.toString())])
    )}.`
  );

  const txFoundInHistory = await firstValueFrom(
    wallet.transactions.history$.pipe(
      map((txs) => txs.find((tx) => tx.id === signedTx.id)),
      filter(isNotNil),
      take(1)
    )
  );

  logger.info(`Found transaction id in chain history: ${txFoundInHistory.id}`);

  // Assert
  expect(txFoundInHistory).toBeDefined();
  expect(txFoundInHistory.id).toEqual(signedTx.id);
};

const createScriptRefInput = async (wallet: BaseWallet, script: Cardano.Script): Promise<Cardano.TxIn> => {
  const tAdaToSend = 25_000_000n;
  // Use dummy address to position the reference script
  const refScriptAddress = Cardano.PaymentAddress(
    'addr_test1qqt9c69kjqf0wsnlp7hs8xees5l6pm4yxdqa3hknqr0kfe0htmj4e5t8n885zxm4qzpfzwruqx3ey3f5q8kpkr0gt9ms8dcsz6'
  );

  // Make sure the wallet has sufficient funds to run this test
  await walletReady(wallet, tAdaToSend);

  await firstValueFrom(wallet.syncStatus.isSettled$.pipe(filter((isSettled) => isSettled)));

  const [{ address: sendingAddress }] = await firstValueFrom(wallet.addresses$);

  logger.info(`Address ${sendingAddress} will send ${tAdaToSend} lovelace to address ${refScriptAddress}.`);

  const txBuilder = wallet.createTxBuilder();
  const txOutput = await txBuilder
    .buildOutput()
    .address(refScriptAddress)
    .coin(tAdaToSend)
    .scriptReference(script)
    .build();

  const signedTx = (await txBuilder.addOutput(txOutput).build().sign()).tx;
  await wallet.submitTx(signedTx);

  logger.info(
    `Submitted transaction id: ${signedTx.id}, inputs: ${JSON.stringify(
      signedTx.body.inputs.map((txIn) => [txIn.txId, txIn.index])
    )} and outputs:${JSON.stringify(
      signedTx.body.outputs.map((txOut) => [txOut.address, Number.parseInt(txOut.value.coins.toString())])
    )}.`
  );

  const txFoundInHistory = await firstValueFrom(
    wallet.transactions.history$.pipe(
      map((txs) => txs.find((tx) => tx.id === signedTx.id)),
      filter(isNotNil),
      take(1)
    )
  );

  logger.info(`Found transaction id in chain history: ${txFoundInHistory.id}`);

  // Assert
  expect(txFoundInHistory).toBeDefined();
  expect(txFoundInHistory.id).toEqual(signedTx.id);

  const index = signedTx.body.outputs.findIndex((out) => !!out.scriptReference);

  return { index, txId: signedTx.id };
};

const getScriptUtxoSet = (
  poolingInterval: number,
  utxoProvider: UtxoProvider,
  scriptAddress: Cardano.PaymentAddress
): Observable<Cardano.Utxo[]> =>
  interval(poolingInterval).pipe(
    switchMap(
      () =>
        new Observable<Cardano.Utxo[]>((subscriber) => {
          utxoProvider
            .utxoByAddresses({ addresses: [scriptAddress] })
            .then((utxos) => {
              subscriber.next(utxos);
            })
            .catch((error) => subscriber.error(error));
        })
    )
  );

// LW-10693: disable until costModels are fetched from protocolParams
describe.skip('PersonalWallet/plutus', () => {
  let wallet: BaseWallet;
  afterAll(() => {
    wallet.shutdown();
  });

  it('can spend balance from a plutus script', async () => {
    wallet = (await getWallet({ env, logger, name: 'Spending Wallet', polling: { interval: 50 } })).wallet;
    // UTXO provider can be use to fetch the UTXO set from the script address.
    const utxoProvider = await utxoProviderFactory.create(env.UTXO_PROVIDER, env.UTXO_PROVIDER_PARAMS, logger);

    // Plutus script that always returns true.
    const alwaysSucceedsScript: Cardano.PlutusScript = {
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob(

      ),
      version: Cardano.PlutusLanguageVersion.V2
    };

    const scriptHash = Serialization.Script.fromCore(alwaysSucceedsScript).hash();
    const scriptAddress = Cardano.EnterpriseAddress.fromCredentials(Cardano.NetworkId.Testnet, {
      hash: scriptHash,
      type: Cardano.CredentialType.ScriptHash
    })
      .toAddress()
      .toBech32() as Cardano.PaymentAddress;

    await fundScript(wallet, scriptAddress, scriptDatum);
    await walletReady(wallet);

    const scriptUtxos = await firstValueFrom(getScriptUtxoSet(50, utxoProvider, scriptAddress));
    const bigScriptUtxo = scriptUtxos.find((utxo) => utxo[1].value.coins === 10_000_000n);
    expect(bigScriptUtxo).toBeDefined();
    const [{ address: receivingAddress }] = await firstValueFrom(wallet.addresses$);

    const txBuilder = wallet.createTxBuilder();
    const txOutput = await txBuilder.buildOutput().address(receivingAddress).coin(10_000_000n).build();

    const signedTx = (
      await txBuilder
        .addInput(bigScriptUtxo!, {
          datum: scriptDatum,
          redeemer: scriptRedeemer,
          script: alwaysSucceedsScript
        })
        .addOutput(txOutput)
        .setValidityInterval({
          invalidBefore: undefined,
          invalidHereafter: undefined // HACK: setting any valid interval cause an error in the node: Uncomputable slot arithmetic; transaction's validity bounds go beyond the foreseeable end of the current era
        })
        .build()
        .sign()
    ).tx;

    await wallet.submitTx(signedTx);

    logger.info(
      `Submitted transaction id: ${signedTx.id}, inputs: ${JSON.stringify(
        signedTx.body.inputs.map((txIn) => [txIn.txId, txIn.index])
      )} and outputs:${JSON.stringify(
        signedTx.body.outputs.map((txOut) => [txOut.address, Number.parseInt(txOut.value.coins.toString())])
      )}.`
    );

    const txFoundInHistory = await firstValueFrom(
      wallet.transactions.history$.pipe(
        map((txs) => txs.find((tx) => tx.id === signedTx.id)),
        filter(isNotNil),
        take(1)
      )
    );

    logger.info(`Found transaction id in chain history: ${txFoundInHistory.id}`);

    // Assert
    expect(txFoundInHistory).toBeDefined();
    expect(txFoundInHistory.id).toEqual(signedTx.id);
  });

  it('can spend balance from a plutus script using a reference script', async () => {
    wallet = (await getWallet({ env, logger, name: 'Spending Wallet', polling: { interval: 50 } })).wallet;
    // UTXO provider can be use to fetch the UTXO set from the script address.
    const utxoProvider = await utxoProviderFactory.create(env.UTXO_PROVIDER, env.UTXO_PROVIDER_PARAMS, logger);

    const midnightClaimScript: Cardano.PlutusScript = {
      __type: Cardano.ScriptType.Plutus,
      bytes: HexBlob(
        ''
      ),
      version: Cardano.PlutusLanguageVersion.V2
    };

    // 1.- Create reference script input
    const scriptRefInput = await createScriptRefInput(wallet, midnightClaimScript);
    const scriptHash = Serialization.Script.fromCore(midnightClaimScript).hash();
    const scriptAddress = Cardano.EnterpriseAddress.fromCredentials(Cardano.NetworkId.Testnet, {
      hash: scriptHash,
      type: Cardano.CredentialType.ScriptHash
    })
      .toAddress()
      .toBech32() as Cardano.PaymentAddress;

    // 2.- Fund script address
    await fundScript(wallet, scriptAddress, midnightDatum);
    await walletReady(wallet);

    // 3.- Spend the UTXO and lock the value back in to the script.
    const scriptUtxos = await firstValueFrom(getScriptUtxoSet(50, utxoProvider, scriptAddress));
    const bigScriptUtxo = scriptUtxos.find((utxo) => utxo[1].value.coins === 10_000_000n);
    expect(bigScriptUtxo).toBeDefined();

    const txBuilder = wallet.createTxBuilder();
    const txOutput = await txBuilder
      .buildOutput()
      .address(scriptAddress)
      .datum(midnightDatum)
      .coin(10_000_000n)
      .build();

    const signedTx = (
      await txBuilder
        .addInput(bigScriptUtxo!, {
          redeemer: midnightClaimRedeemer
        })
        .addReferenceInput(scriptRefInput)
        .addOutput(txOutput)
        .setValidityInterval({
          invalidBefore: undefined,
          invalidHereafter: undefined // HACK: setting any valid interval cause an error in the node: Uncomputable slot arithmetic; transaction's validity bounds go beyond the foreseeable end of the current era
        })
        .build()
        .sign()
    ).tx;

    await wallet.submitTx(signedTx);

    logger.info(
      `Submitted transaction id: ${signedTx.id}, inputs: ${JSON.stringify(
        signedTx.body.inputs.map((txIn) => [txIn.txId, txIn.index])
      )} and outputs:${JSON.stringify(
        signedTx.body.outputs.map((txOut) => [txOut.address, Number.parseInt(txOut.value.coins.toString())])
      )}.`
    );

    const txFoundInHistory = await firstValueFrom(
      wallet.transactions.history$.pipe(
        map((txs) => txs.find((tx) => tx.id === signedTx.id)),
        filter(isNotNil),
        take(1)
      )
    );

    logger.info(`Found transaction id in chain history: ${txFoundInHistory.id}`);

    // Assert
    expect(txFoundInHistory).toBeDefined();
    expect(txFoundInHistory.id).toEqual(signedTx.id);
  });
});
