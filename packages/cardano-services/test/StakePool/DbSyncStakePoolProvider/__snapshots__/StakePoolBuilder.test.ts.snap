// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StakePoolBuilder buildAndQuery buildAndQuery, queryPoolHashes & queryTotalCount 1`] = `
Object {
  "params": Array [
    "%(CL)%",
    "%(CLIO)%",
    "%(pool1jcwn98a6rqr7a7yakanm5sz6asx9gfjsr343mus0tsye23wmg70)%",
  ],
  "query": "WITH 
    current_epoch AS (
 SELECT 
  \\"no\\"
 FROM epoch
 ORDER BY id DESC 
 LIMIT 1
),
     pools_delegated AS (
    SELECT 
      ph.id,
      ph.view,
      pu.id AS update_id,
      pu.active_epoch_no,
      pu.pledge,
      sa.id AS stake_address_id
    FROM pool_hash ph 
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      ) 
    JOIN stake_address sa ON
      sa.hash_raw = pu.reward_addr 
    JOIN delegation d1 on
      sa.id = d1.addr_id 
    WHERE NOT EXISTS
      (SELECT TRUE
        FROM delegation d2
        WHERE d2.addr_id=d1.addr_id 
          AND d2.tx_id>d1.tx_id)
    AND NOT EXISTS
      (SELECT TRUE
        FROM stake_deregistration
        WHERE stake_deregistration.addr_id=d1.addr_id
          AND stake_deregistration.tx_id>d1.tx_id)
    ), pool_owner_rewards AS (
  SELECT 
    COALESCE(SUM(r.amount),0) AS total_amount,
    sa.id AS stake_address_id,
    r.pool_id
  FROM reward r
  JOIN stake_address sa ON 
      sa.id = r.addr_id
  WHERE sa.id in (SELECT stake_address_id FROM pools_delegated) and
    r.spendable_epoch <= (SELECT \\"no\\" FROM current_epoch)
  GROUP BY r.pool_id, sa.id), pool_owner_withdraws AS ( 
  SELECT 
    COALESCE(SUM(w.amount),0)  AS total_amount,
    sa.id AS stake_address_id
  FROM withdrawal w
  JOIN tx ON tx.id = w.tx_id AND 
    tx.valid_contract = TRUE
  JOIN stake_address sa ON sa.id = w.addr_id
  JOIN pools_delegated pool on pool.stake_address_id = sa.id 
  GROUP BY sa.id), reward_acc_balance AS (
  SELECT 
    (r.total_amount - w.total_amount)  AS total_amount,
    r.stake_address_id,
    r.pool_id 
  FROM pool_owner_rewards r
  JOIN pool_owner_withdraws w 
    on r.stake_address_id = w.stake_address_id ), owners_utxo AS (
  SELECT
    tx_out.value AS value,
    o.pool_hash_id 
  FROM tx_out
  JOIN pool_owner o on 
    o.addr_id = tx_out.stake_address_id and 
    o.pool_hash_id in (SELECT id FROM pools_delegated)
  LEFT JOIN tx_in ON 
    tx_out.tx_id = tx_in.tx_out_id AND 
    tx_out.index::smallint = tx_in.tx_out_index::smallint
  LEFT JOIN tx AS tx_in_tx ON 
    tx_in_tx.id = tx_in.tx_in_id AND
      tx_in_tx.valid_contract = TRUE
  JOIN tx AS tx_out_tx ON
    tx_out_tx.id = tx_out.tx_id AND
      tx_out_tx.valid_contract = TRUE
  WHERE 
    tx_in_tx.id IS NULL), owners_balance AS (
  SELECT 
    SUM(value) AS total_amount,
    pool_hash_id
  FROM owners_utxo 
  GROUP BY pool_hash_id)
      
    SELECT
        ph.id,
        ph.update_id
    FROM pools_delegated AS ph
    LEFT JOIN owners_balance o_balance ON 
        ph.id = o_balance.pool_hash_id
    LEFT JOIN reward_acc_balance r_balance ON
        r_balance.pool_id = ph.id
 
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      ) 
 
    LEFT JOIN pool_offline_data pod 
      ON pod.pool_id = ph.id
    
          LEFT JOIN pool_retire pr ON 
            pr.id = (
              SELECT id
              FROM pool_retire pr2
              WHERE pr2.hash_id = ph.id
              ORDER BY id desc 
              LIMIT 1
            )
           WHERE  
    ((COALESCE(o_balance.total_amount,0) +
    COALESCE (r_balance.total_amount, 0)) 
     >= ph.pledge) AND ((pod.\\"json\\" ->>'name')::varchar SIMILAR TO $1 and pod.ticker_name SIMILAR TO $2 and ph.view SIMILAR TO $3) AND ((COALESCE(pr.retiring_epoch,0) > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > ph.active_epoch_no) OR (COALESCE(pr.retiring_epoch,0) <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > ph.active_epoch_no) OR (ph.active_epoch_no > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) <= ph.active_epoch_no) OR (ph.active_epoch_no <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) < ph.active_epoch_no)) GROUP BY ph.id, ph.update_id ORDER BY ph.id DESC",
}
`;

exports[`StakePoolBuilder buildAndQuery buildAndQuery, queryPoolHashes & queryTotalCount 2`] = `"1"`;

exports[`StakePoolBuilder buildOrQuery buildOrQuery, queryPoolHashes & queryTotalCount 1`] = `
Object {
  "params": Array [
    "%(CL)%",
    "%(CLIO)%",
    "%(pool1jcwn98a6rqr7a7yakanm5sz6asx9gfjsr343mus0tsye23wmg70)%",
  ],
  "query": "
    WITH current_epoch AS (
 SELECT 
  \\"no\\"
 FROM epoch
 ORDER BY id DESC 
 LIMIT 1
), pools_by_identifier AS (
    
  SELECT 
    ph.id,
    pu.id AS update_id
  FROM pool_hash ph 
  
     
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      )
     
    LEFT JOIN pool_offline_data pod 
      ON pod.pool_id = ph.id
    
    WHERE ((pod.\\"json\\" ->>'name')::varchar SIMILAR TO $1 and pod.ticker_name SIMILAR TO $2 and ph.view SIMILAR TO $3)
    ), pools_by_status AS (
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((COALESCE(pr.retiring_epoch,0) > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no) OR (COALESCE(pr.retiring_epoch,0) <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no) OR (pu.active_epoch_no > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) <= pu.active_epoch_no) OR (pu.active_epoch_no <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) < pu.active_epoch_no))
    ), pools_delegated AS (
    SELECT 
      ph.id,
      ph.view,
      pu.id AS update_id,
      pu.active_epoch_no,
      pu.pledge,
      sa.id AS stake_address_id
    FROM pool_hash ph 
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      ) 
    JOIN stake_address sa ON
      sa.hash_raw = pu.reward_addr 
    JOIN delegation d1 on
      sa.id = d1.addr_id 
    WHERE NOT EXISTS
      (SELECT TRUE
        FROM delegation d2
        WHERE d2.addr_id=d1.addr_id 
          AND d2.tx_id>d1.tx_id)
    AND NOT EXISTS
      (SELECT TRUE
        FROM stake_deregistration
        WHERE stake_deregistration.addr_id=d1.addr_id
          AND stake_deregistration.tx_id>d1.tx_id)
    ), pool_owner_rewards AS (
  SELECT 
    COALESCE(SUM(r.amount),0) AS total_amount,
    sa.id AS stake_address_id,
    r.pool_id
  FROM reward r
  JOIN stake_address sa ON 
      sa.id = r.addr_id
  WHERE sa.id in (SELECT stake_address_id FROM pools_delegated) and
    r.spendable_epoch <= (SELECT \\"no\\" FROM current_epoch)
  GROUP BY r.pool_id, sa.id), pool_owner_withdraws AS ( 
  SELECT 
    COALESCE(SUM(w.amount),0)  AS total_amount,
    sa.id AS stake_address_id
  FROM withdrawal w
  JOIN tx ON tx.id = w.tx_id AND 
    tx.valid_contract = TRUE
  JOIN stake_address sa ON sa.id = w.addr_id
  JOIN pools_delegated pool on pool.stake_address_id = sa.id 
  GROUP BY sa.id), reward_acc_balance AS (
  SELECT 
    (r.total_amount - w.total_amount)  AS total_amount,
    r.stake_address_id,
    r.pool_id 
  FROM pool_owner_rewards r
  JOIN pool_owner_withdraws w 
    on r.stake_address_id = w.stake_address_id ), owners_utxo AS (
  SELECT
    tx_out.value AS value,
    o.pool_hash_id 
  FROM tx_out
  JOIN pool_owner o on 
    o.addr_id = tx_out.stake_address_id and 
    o.pool_hash_id in (SELECT id FROM pools_delegated)
  LEFT JOIN tx_in ON 
    tx_out.tx_id = tx_in.tx_out_id AND 
    tx_out.index::smallint = tx_in.tx_out_index::smallint
  LEFT JOIN tx AS tx_in_tx ON 
    tx_in_tx.id = tx_in.tx_in_id AND
      tx_in_tx.valid_contract = TRUE
  JOIN tx AS tx_out_tx ON
    tx_out_tx.id = tx_out.tx_id AND
      tx_out_tx.valid_contract = TRUE
  WHERE 
    tx_in_tx.id IS NULL), owners_balance AS (
  SELECT 
    SUM(value) AS total_amount,
    pool_hash_id
  FROM owners_utxo 
  GROUP BY pool_hash_id), pools_by_pledge_met AS (
    
    SELECT
        ph.id,
        ph.update_id
    FROM pools_delegated AS ph 
    
    LEFT JOIN owners_balance o_balance ON 
        ph.id = o_balance.pool_hash_id
    LEFT JOIN reward_acc_balance r_balance ON
        r_balance.pool_id = ph.id 
    WHERE  
    ((COALESCE(o_balance.total_amount,0) +
    COALESCE (r_balance.total_amount, 0)) 
     >= ph.pledge)) 
    SELECT id, update_id
    FROM
    (SELECT id, update_id FROM pools_by_identifier UNION SELECT id, update_id FROM pools_by_status UNION SELECT id, update_id FROM pools_by_pledge_met)
    AS pools
    GROUP BY id,update_id
    ORDER BY id DESC
    ",
}
`;

exports[`StakePoolBuilder buildOrQuery buildOrQuery, queryPoolHashes & queryTotalCount 2`] = `"9"`;

exports[`StakePoolBuilder buildPoolsByIdentifierQuery buildPoolsByIdentifierQuery 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_identifier",
  },
  "params": Array [
    "%(CL)%",
    "%(CLIO)%",
    "%(pool1jcwn98a6rqr7a7yakanm5sz6asx9gfjsr343mus0tsye23wmg70)%",
  ],
  "query": "
    
  SELECT 
    ph.id,
    pu.id AS update_id
  FROM pool_hash ph 
  
     
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      )
     
    LEFT JOIN pool_offline_data pod 
      ON pod.pool_id = ph.id
    
    WHERE ((pod.\\"json\\" ->>'name')::varchar SIMILAR TO $1 and pod.ticker_name SIMILAR TO $2 and ph.view SIMILAR TO $3)
    ",
}
`;

exports[`StakePoolBuilder buildPoolsByPledgeMetQuery pledgeMet false 1`] = `
Array [
  Object {
    "id": Object {
      "name": "pools_delegated",
    },
    "query": "
    SELECT 
      ph.id,
      ph.view,
      pu.id AS update_id,
      pu.active_epoch_no,
      pu.pledge,
      sa.id AS stake_address_id
    FROM pool_hash ph 
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      ) 
    JOIN stake_address sa ON
      sa.hash_raw = pu.reward_addr 
    JOIN delegation d1 on
      sa.id = d1.addr_id 
    WHERE NOT EXISTS
      (SELECT TRUE
        FROM delegation d2
        WHERE d2.addr_id=d1.addr_id 
          AND d2.tx_id>d1.tx_id)
    AND NOT EXISTS
      (SELECT TRUE
        FROM stake_deregistration
        WHERE stake_deregistration.addr_id=d1.addr_id
          AND stake_deregistration.tx_id>d1.tx_id)
    ",
  },
  Object {
    "id": Object {
      "name": "pool_owner_rewards",
    },
    "query": "
  SELECT 
    COALESCE(SUM(r.amount),0) AS total_amount,
    sa.id AS stake_address_id,
    r.pool_id
  FROM reward r
  JOIN stake_address sa ON 
      sa.id = r.addr_id
  WHERE sa.id in (SELECT stake_address_id FROM pools_delegated) and
    r.spendable_epoch <= (SELECT \\"no\\" FROM current_epoch)
  GROUP BY r.pool_id, sa.id",
  },
  Object {
    "id": Object {
      "name": "pool_owner_withdraws",
    },
    "query": " 
  SELECT 
    COALESCE(SUM(w.amount),0)  AS total_amount,
    sa.id AS stake_address_id
  FROM withdrawal w
  JOIN tx ON tx.id = w.tx_id AND 
    tx.valid_contract = TRUE
  JOIN stake_address sa ON sa.id = w.addr_id
  JOIN pools_delegated pool on pool.stake_address_id = sa.id 
  GROUP BY sa.id",
  },
  Object {
    "id": Object {
      "name": "reward_acc_balance",
    },
    "query": "
  SELECT 
    (r.total_amount - w.total_amount)  AS total_amount,
    r.stake_address_id,
    r.pool_id 
  FROM pool_owner_rewards r
  JOIN pool_owner_withdraws w 
    on r.stake_address_id = w.stake_address_id ",
  },
  Object {
    "id": Object {
      "name": "owners_utxo",
    },
    "query": "
  SELECT
    tx_out.value AS value,
    o.pool_hash_id 
  FROM tx_out
  JOIN pool_owner o on 
    o.addr_id = tx_out.stake_address_id and 
    o.pool_hash_id in (SELECT id FROM pools_delegated)
  LEFT JOIN tx_in ON 
    tx_out.tx_id = tx_in.tx_out_id AND 
    tx_out.index::smallint = tx_in.tx_out_index::smallint
  LEFT JOIN tx AS tx_in_tx ON 
    tx_in_tx.id = tx_in.tx_in_id AND
      tx_in_tx.valid_contract = TRUE
  JOIN tx AS tx_out_tx ON
    tx_out_tx.id = tx_out.tx_id AND
      tx_out_tx.valid_contract = TRUE
  WHERE 
    tx_in_tx.id IS NULL",
  },
  Object {
    "id": Object {
      "name": "owners_balance",
    },
    "query": "
  SELECT 
    SUM(value) AS total_amount,
    pool_hash_id
  FROM owners_utxo 
  GROUP BY pool_hash_id",
  },
  Object {
    "id": Object {
      "isPrimary": true,
      "name": "pools_by_pledge_met",
    },
    "query": "
    
    SELECT
        ph.id,
        ph.update_id
    FROM pools_delegated AS ph 
    
    LEFT JOIN owners_balance o_balance ON 
        ph.id = o_balance.pool_hash_id
    LEFT JOIN reward_acc_balance r_balance ON
        r_balance.pool_id = ph.id 
    WHERE  
    ((COALESCE(o_balance.total_amount,0) +
    COALESCE (r_balance.total_amount, 0)) 
    < ph.pledge)",
  },
]
`;

exports[`StakePoolBuilder buildPoolsByPledgeMetQuery pledgeMet true 1`] = `
Array [
  Object {
    "id": Object {
      "name": "pools_delegated",
    },
    "query": "
    SELECT 
      ph.id,
      ph.view,
      pu.id AS update_id,
      pu.active_epoch_no,
      pu.pledge,
      sa.id AS stake_address_id
    FROM pool_hash ph 
    JOIN pool_update pu
      ON pu.id = (
        SELECT id
        FROM pool_update pu2
        WHERE pu2.hash_id = ph.id
        ORDER BY id DESC
        LIMIT 1
      ) 
    JOIN stake_address sa ON
      sa.hash_raw = pu.reward_addr 
    JOIN delegation d1 on
      sa.id = d1.addr_id 
    WHERE NOT EXISTS
      (SELECT TRUE
        FROM delegation d2
        WHERE d2.addr_id=d1.addr_id 
          AND d2.tx_id>d1.tx_id)
    AND NOT EXISTS
      (SELECT TRUE
        FROM stake_deregistration
        WHERE stake_deregistration.addr_id=d1.addr_id
          AND stake_deregistration.tx_id>d1.tx_id)
    ",
  },
  Object {
    "id": Object {
      "name": "pool_owner_rewards",
    },
    "query": "
  SELECT 
    COALESCE(SUM(r.amount),0) AS total_amount,
    sa.id AS stake_address_id,
    r.pool_id
  FROM reward r
  JOIN stake_address sa ON 
      sa.id = r.addr_id
  WHERE sa.id in (SELECT stake_address_id FROM pools_delegated) and
    r.spendable_epoch <= (SELECT \\"no\\" FROM current_epoch)
  GROUP BY r.pool_id, sa.id",
  },
  Object {
    "id": Object {
      "name": "pool_owner_withdraws",
    },
    "query": " 
  SELECT 
    COALESCE(SUM(w.amount),0)  AS total_amount,
    sa.id AS stake_address_id
  FROM withdrawal w
  JOIN tx ON tx.id = w.tx_id AND 
    tx.valid_contract = TRUE
  JOIN stake_address sa ON sa.id = w.addr_id
  JOIN pools_delegated pool on pool.stake_address_id = sa.id 
  GROUP BY sa.id",
  },
  Object {
    "id": Object {
      "name": "reward_acc_balance",
    },
    "query": "
  SELECT 
    (r.total_amount - w.total_amount)  AS total_amount,
    r.stake_address_id,
    r.pool_id 
  FROM pool_owner_rewards r
  JOIN pool_owner_withdraws w 
    on r.stake_address_id = w.stake_address_id ",
  },
  Object {
    "id": Object {
      "name": "owners_utxo",
    },
    "query": "
  SELECT
    tx_out.value AS value,
    o.pool_hash_id 
  FROM tx_out
  JOIN pool_owner o on 
    o.addr_id = tx_out.stake_address_id and 
    o.pool_hash_id in (SELECT id FROM pools_delegated)
  LEFT JOIN tx_in ON 
    tx_out.tx_id = tx_in.tx_out_id AND 
    tx_out.index::smallint = tx_in.tx_out_index::smallint
  LEFT JOIN tx AS tx_in_tx ON 
    tx_in_tx.id = tx_in.tx_in_id AND
      tx_in_tx.valid_contract = TRUE
  JOIN tx AS tx_out_tx ON
    tx_out_tx.id = tx_out.tx_id AND
      tx_out_tx.valid_contract = TRUE
  WHERE 
    tx_in_tx.id IS NULL",
  },
  Object {
    "id": Object {
      "name": "owners_balance",
    },
    "query": "
  SELECT 
    SUM(value) AS total_amount,
    pool_hash_id
  FROM owners_utxo 
  GROUP BY pool_hash_id",
  },
  Object {
    "id": Object {
      "isPrimary": true,
      "name": "pools_by_pledge_met",
    },
    "query": "
    
    SELECT
        ph.id,
        ph.update_id
    FROM pools_delegated AS ph 
    
    LEFT JOIN owners_balance o_balance ON 
        ph.id = o_balance.pool_hash_id
    LEFT JOIN reward_acc_balance r_balance ON
        r_balance.pool_id = ph.id 
    WHERE  
    ((COALESCE(o_balance.total_amount,0) +
    COALESCE (r_balance.total_amount, 0)) 
     >= ph.pledge)",
  },
]
`;

exports[`StakePoolBuilder buildPoolsByStatusQuery activating 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_status",
  },
  "query": "
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((pu.active_epoch_no > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) <= pu.active_epoch_no))
    ",
}
`;

exports[`StakePoolBuilder buildPoolsByStatusQuery active 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_status",
  },
  "query": "
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((pu.active_epoch_no <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) < pu.active_epoch_no))
    ",
}
`;

exports[`StakePoolBuilder buildPoolsByStatusQuery active,activating,retiring,retired 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_status",
  },
  "query": "
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((COALESCE(pr.retiring_epoch,0) > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no) OR (COALESCE(pr.retiring_epoch,0) <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no) OR (pu.active_epoch_no > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) <= pu.active_epoch_no) OR (pu.active_epoch_no <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) < pu.active_epoch_no))
    ",
}
`;

exports[`StakePoolBuilder buildPoolsByStatusQuery retired 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_status",
  },
  "query": "
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((COALESCE(pr.retiring_epoch,0) <= (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no))
    ",
}
`;

exports[`StakePoolBuilder buildPoolsByStatusQuery retiring 1`] = `
Object {
  "id": Object {
    "isPrimary": true,
    "name": "pools_by_status",
  },
  "query": "
    
    SELECT
      ph.id,
      pu.id AS update_id
    FROM pool_hash ph
    JOIN pool_update pu
        ON pu.id = (
          SELECT id
          FROM pool_update pu2
          WHERE pu2.hash_id = ph.id
          ORDER BY id DESC
          LIMIT 1
        )
    LEFT JOIN pool_retire pr 
        ON pr.id = (
          SELECT id
          FROM pool_retire pr2
          WHERE pr2.hash_id = ph.id
          ORDER BY id desc 
          LIMIT 1
    )
  
    WHERE ((COALESCE(pr.retiring_epoch,0) > (SELECT \\"no\\" FROM current_epoch) 
          AND COALESCE(pr.retiring_epoch,0) > pu.active_epoch_no))
    ",
}
`;

exports[`StakePoolBuilder getLastEpoch getLastEpoch 1`] = `183`;

exports[`StakePoolBuilder getTotalAmountOfAda getTotalAmountOfAda 1`] = `"69154425288708824"`;

exports[`StakePoolBuilder queryPoolData queryPoolData 1`] = `
Array [
  Object {
    "cost": 340000000n,
    "hexId": "5685f37bca393c683cf03e428280312c6c4ea485188672a2a0b3195c",
    "id": "pool126zlx7728y7xs08s8epg9qp393kyafy9rzr89g4qkvv4cv93zem",
    "margin": Object {
      "denominator": 40,
      "numerator": 3,
    },
    "metadataJson": Object {
      "hash": "7feb5bf22fc8c57be71a4b24f68381a7d1051e94290164530da6f7d5682a0024",
      "url": "https://visionstaking.ch/poolmeta.json",
    },
    "pledge": 10000000n,
    "rewardAccount": "stake_test1up32f2hrv5ytqk8ad6e4apss5zrrjjlrkjhrksypn5g08fqrqf9gr",
    "vrfKeyHash": "3409a1bebeaa47e6d99e0748a99f65dee60b7f7e9a64dc865d52b4fb445b98ab",
  },
  Object {
    "cost": 400000000n,
    "hexId": "22a8dc80b6fb4852150960c2e3896fa0a03498f514afc474c33152b6",
    "id": "pool1y25deq9kldy9y9gfvrpw8zt05zsrfx84zjhugaxrx9ftvwdpua2",
    "margin": Object {
      "denominator": 100,
      "numerator": 7,
    },
    "metadataJson": Object {
      "hash": "67b52f96eb40fcc18fa9cd8b9d7dd620811756f1029411d105de2eaf79655fa4",
      "url": "https://explorer.cardano-testnet.iohkdev.io/p/1.json",
    },
    "pledge": 1000000000000n,
    "rewardAccount": "stake_test1uz8tusy3ruaw9ekplepacer4v6hpmpcp6ngp3gwj5ve3yjchsqqxn",
    "vrfKeyHash": "43a78f2b4811cdb2e52c13b6ad6a1732a9fb44d3d64adeb1fc2b4867116881b8",
  },
]
`;

exports[`StakePoolBuilder queryPoolMetrics queryPoolMetrics 1`] = `
Array [
  Object {
    "blocksCreated": "0",
    "delegators": "1",
    "livePledge": 999999828559n,
    "saturation": "0.01189867476975633141",
    "size": Object {
      "active": "0.0000000000000000000000000000",
      "live": "1.00000000000000000000",
    },
    "stake": Object {
      "active": 0n,
      "live": 999999828559n,
    },
  },
]
`;

exports[`StakePoolBuilder queryPoolOwners queryPoolOwners 1`] = `
Array [
  "stake_test1urryfvusd49ej55gvf3cxtje4pqmtcdswwqxw37g6uclhnsqj7d5w",
]
`;

exports[`StakePoolBuilder queryPoolRewards queryPoolRewards 1`] = `
Array [
  Object {
    "activeStake": 1004862928388n,
    "epoch": 77,
    "epochLength": 431980000,
    "memberROI": 0,
    "operatorFees": 0n,
    "totalRewards": 0n,
  },
  undefined,
  undefined,
]
`;

exports[`StakePoolBuilder queryPoolStats returns active, retired and retiring pools count 1`] = `
Object {
  "qty": Object {
    "active": 7,
    "retired": 2,
    "retiring": 0,
  },
}
`;

exports[`StakePoolBuilder queryRegistrations queryRegistrations 1`] = `
Array [
  Object {
    "activeEpochNo": "76",
    "transactionId": "295d5e0f7ee182426eaeda8c9f1c63502c72cdf4afd6e0ee0f209adf94a614e7",
  },
]
`;

exports[`StakePoolBuilder queryRetirements queryRetirements 1`] = `
Array [
  Object {
    "retiringEpoch": 78,
    "transactionId": "c27b294bb3dfbdfeda19b7f0254b23f91e3a48a2111c52dd99da6f1c8c3ff74f",
  },
]
`;
